+++
title = "Lab 3: R basics"
author = ["Jonghyun Yun"]
lastmod = 2020-04-04T20:11:05-05:00
tags = ["R tutorial"]
categories = ["teaching", "math6312"]
draft = false
type = "docs"
toc = true
[menu."math6312-sp19"]
  identifier = "lab-3-r-basics"
  parent = "R Lab"
  weight = 30
+++

```{R  global_option,include=F,echo=F}
## Need the knitr package to set chunk options
library(knitr)

## Set knitr options for knitting code into the report:
## Print out code (echo)
## Save results so that code blocks aren't re-run unless code changes (cache),
## or a relevant earlier code block changed (autodep), but don't re-run if the
## only thing that changed was the comments (cache.comments)
## Align plots center (fig.align)
## Don't clutter R output with messages or warnings (message, warning)
## This will leave error messages showing up in the knitted report
opts_chunk$set(echo=TRUE,
               cache=FALSE, autodep=TRUE, cache.comments=FALSE,
               fig.align="center",
               message=FALSE, warning=FALSE)
```

---


## R as a calculator {#r-as-a-calculator}


### Basic operations {#basic-operations}

<a id="code-snippet--basic op"></a>
```{R  basic_op}
2 + 2 # add numbers
2 * pi # multiply by a constant
3^4 # powers
sqrt(4^2) # functions
log(100, base = 10)
log(exp(1))
```


### Functions in statistics {#functions-in-statistics}

```{R  }
7 + runif(1) # add a Uniform(0,1) random number
pnorm(1.96,0,1) # standard normal cdf
rnorm(5) # generate 5 random numbers from N(0,1)
```


## Assigning values to R objects {#assigning-values-to-r-objects}

A key action in R is to store values in the form of R objects, and to examine the value of R objects.

```{R  }
val = 3
val
print(val)
# assign value to two objects
a = b = 3
a
b
Val = 7 # case-sensitive!
print(c(val, Val))
```

```{R  }
mySeq = 1:6
mySeq
myOtherSeq = seq(1.1, 11.1, by = 2)
myOtherSeq
length(myOtherSeq)
fours = rep(4, 6)
fours
# This is a comment: here is an example of non-npnorm(-1.96,0,1) -umeric data
depts = c('espm', 'pmb', 'stats')
depts
```

saved it for later use. R gives us a lot of flexibility (within certain rules) for assigning to (parts of) objects from (parts of) other objects.


## How to be [lazy](http://dilbert.com/strips/comic/2005-05-29/) {#how-to-be-lazy}

If you're starting to type something you've typed before, or the long name of an R object or function, STOP! You likely don't need to type all of that.

-   Tab completion
-   Command history
    -   up/down arrows
    -   Ctrl-{up arrow} or Command-{up arrow}

-   R Studio: select a line or block for execution
-   Put your code in a file and use `source()`. For example: `source('MyScript.R')`


## Vectors in R {#vectors-in-r}

The most basic form of an R object is a vector. In fact, individual (scalar) values are vectors of length one.

We can concatenate values into a vector with `c()`.

```{R  }
# numeric vector
nums = c(1.1, 3, -5.7)
devs = rnorm(5)
devs
# logical vector
bools = c(TRUE, FALSE, TRUE)
bools
```


## Working with indices and subsets {#working-with-indices-and-subsets}

```{R  }
vals = seq(2, 12, by = 2)
vals
vals[3]
vals[3:5]
vals[c(1, 3, 6)]
vals[-c(1, 3, 6)]
vals[c(rep(TRUE, 3), rep(FALSE, 2), TRUE)]
# list values >= 5
vals[vals >= 5]
# list index whose value = 4
which(vals ==  4)
```


## Vectorized calculations and comparisons {#vectorized-calculations-and-comparisons}

At the core of R is the idea of doing calculations on entire vectors.

```{R  }
vec1 = sample(1:5, 10, replace = TRUE)
vec2 = sample(1:5, 10, replace = TRUE)
vec1
vec2
vec1 + vec2
vec1^vec2
vec1 >= vec2
vec1 <= 3
# using 'or'
vec1 <= 0 | vec1 >= 3
# using 'and'
vec1 <= 0 & vec1 >= vec2
vec1 == vec2
vec1 != vec2
# careful:
vec1 = vec2
identical(vec1, vec2)
```

An important related concept is that of recycling

```{R  }
vec3 = sample(1:5, 5, replace = TRUE)
vec4 = sample(1:5, 3, replace = TRUE)
vec1
vec3
vec4
vec1 + vec3
vec1 + vec4
```

**Question**: Tell me what's going on. What choices were made by the R developers?


## R is a functional language {#r-is-a-functional-language}

-   Operations are carried out with functions. Functions take objects as inputs and return objects as outputs.
-   An analysis can be considered a pipeline of function calls, with output from a function used later in a subsequent operation as input to another function.
-   We can embed function calls:

<!--listend-->

```{R  }
set.seed(1) # set a random seed, so your random numbers won't be different when you generate them next time.
hist(rnorm(1000))
```


## Getting help about a function {#getting-help-about-a-function}

To get information about a function you know exists, use `help` or `?`, e.g., `?lm`. For information on a general topic, use `apropos` or `??`


## Basic kinds of R objects {#basic-kinds-of-r-objects}

Vectors are not the only kinds of R objects.


#### Vectors {#vectors}

Vectors of various types (numeric (i.e., decimal/floating point/double), integer, boolean, character), all items must be of the same type


#### Matrices {#matrices}

Matrices of various types, all items must be of the same type

```{R  }
mat = matrix(c(1,0,5,2,1,6,3,4,0),3,3)
t(mat) %*% mat
dim(mat)
# * is element-wise product
t(mat) * mat
```


#### Some linear algera {#some-linear-algera}

```{R  }
# vector without declaration of column/row vector
z = c(1,2,3)

# column vector 3 by 1
x = matrix(c(1,2,3),3,1)
x
# transpose
t(x)
# row vector 1 by 3
y = matrix(c(3,2,1),1,3)
y
# sum
c(y %*% rep(1,length(y)))
sum(y)
# L-2 norm of a vector
norm(x,"f")
# inner product
t(x) %*% x
z %*% z
# outer product
x %*% t(x)
z %o% z
# recycling mat
mat
# diagonal of matrix
diag(mat)
```

```{R  }
# determinant of matrix
det(mat)
# trace of matrix
sum(diag(mat))
# positive definite symmetric matrix A
A = t(mat) %*% mat
A
# inverse
solve(A)
solve(A) %*% A
A %*% solve(A)
```

**Question**: Why `solve(A) %*% A` does not produce the identity matrix?

```{R  }
# eigenvalues and eigenvector
myeigen = eigen(A)

# spectral decomposition
D = diag(myeigen$values)
D
C = myeigen$vectors
C %*% D %*% t(C)
# see if A = CDC'
C %*% D %*% t(C) == A
# square root of A
C %*% sqrt(D) %*% t(C)
# it is not sqrt(A)
sqrt(A)
```


#### More linear algebra {#more-linear-algebra}

```{R  }
X = t(C %*% sqrt(D) %*% matrix(rnorm(100*3),3,100))
head(X) # first few rows of X
cov(X) # sample covariance matirx
# singular value decomposition of X
mysvd <- svd(X)
mysvd$d
D = diag(mysvd$d[1:2])
X_recon = mysvd$u[,1:2] %*% D %*% t(mysvd$v[,1:2]) # reconstruct X using 2-dim basis
cov(X_recon)
```


#### Lists {#lists}

Collections of disparate or complicated objects

```{R  }
myList = list(stuff = 3, mat = matrix(1:4, nrow = 2),
   moreStuff = c("china", "japan"), list(5, "bear"))
myList
myList[[1]] # result is not (usually) a list (unless you have nested lists)
identical(myList[[1]], myList$stuff)
myList$moreStuff[2]
myList[[4]][[2]]
myList[1:3] # subset of a list is a list
myList$newOne = 'more weird stuff'
names(myList)
```

Lists can be used as vectors of complicated objects. E.g., suppose you have a linear regression for each value of a stratifying variable. You could have a list of regression fits. Each regression fit will itself be a list, so you'll have a list of lists.


#### R data frame {#r-data-frame}

A data frame is used for storing data tables. It is a list of vectors of equal length. Some R functions work properly only on the data frame.

```{R  }
df = data.frame(X) # turning a matrix into a data frame
colnames(df) = c("y","x1","x2") # assigning variable names (column names)
head(df)
head(df$x1) # access variable by name
df$group = sample(1:2,100,T) # randomly assign into two groups
aggregate(df[,-4], list(df$group), mean) # group means
aggregate(df[,-4], list(df$group), var) # group variances
```

A data frame can contain variables in different types.

```{R  }
age = c(32,34,23)
sex = c("M","F","M")
healthy = c(TRUE, FALSE, FALSE)

dat = data.frame(age,sex,healthy)
dat
```


## R for programming {#r-for-programming}


### For-loop {#for-loop}

The for-loop iterates commands over a set of indexes. The below is to calculate the sum and product of `x`. The `tot` and `prd` should be properly pre-defined before the for-loop below.

```{R  }
x = rnorm(100)
tot = 0
prd = 1
for (i in 1:length(x)){
  tot = tot + x[i]
  prd = prd * x[i]
}
tot
prd
```

The R for-loop can be iterated over any set of R objects.

```{R  }
for (j in c(1,2,-1,sqrt(2))){
  print(j)
  }
```

```{R  }
for (j in c("apple", "banana", "orange")){
  print(j)
  }
```


### Function {#function}

An R function takes R objects as inputs, and return an R object (vector, matrix, plot, list, etc). Let's see a simple example.

```{R  }
square = function(x){
  y = x * x
  return(y)
}
square(2)
```

In the above, local variables `x` and `y` are declared inside a function, and they can be accessed only inside that function.

```{R  }
identical(y, 4)
```

In the meanwhile, global variables are declared outside any function, and they can be accessed (used) out/inside any function. However, using global variables inside a function may be a bad programming practice since global variables can be changed easily by any function or R console.

```{R  }
g.var = 20
div20 = function(x){
out = x / g.var
return(out)
}
div20(20)
```

```{R  }
g.var = 10
div20(20)
```

To void this issue, a local `g.var` variable is defined in the function `div20()`. Observe that global and local variables have the same name, but different values.

```{R  }
div20 = function(x){
g.var = 20
out = x / g.var
print(g.var)
return(out)
}
div20(20)
```

```{R  }
g.var
```

You can also return a vector output from a function.

```{R  }
myfun1 = function(x,y) {
  prod = x * y
  sum = x + y
    return(c(prod,sum))
}
myfun1(2,3)
```

An R function can return a list object. This is very useful when you have different types of variables as output.

```{R  }
myfun2 = function(x,y) {
  prod = x * y
  sum = x + y
  out = list(prod,sum)
  names(out) = c("prod","sum")
  return(out)
}
ans = myfun2(2,3)
ans
```


## (optional) R data.table {#optional--r-data-dot-table}

<kbd>data.frame</kbd> is part of base R, and <kbd>data.table</kbd> is a package that extends <kbd>data.frame</kbd>. Two of its most notable features are speed and cleaner syntax. However, that syntax is different from the standard R syntax for <kbd>data.frame</kbd>. You may enjoy great performance of <kbd>data.table</kbd> after the relatively steep learning curve.

```{R  }
library(data.table)
dat = data.table(age, sex, healthy)
class(dat)
dat
```

The data manipulation using <kbd>data.table</kbd> has a general form: <kbd>DT[i, j, by]</kbd>, which means "Take <kbd>DT</kbd>, subset rows using <kbd>i</kbd>, then calculate <kbd>j</kbd> grouped by <kbd>by</kbd>"

```{R  }
diamondsDT <- data.table(ggplot2::diamonds)
diamondsDT

diamondsDT[
  cut != "Fair", # subset of rows with no Fair cut
  .(AvgPrice = mean(price), # Returns the mean and median of column price and # of cases as data.table
    MedianPrice = as.numeric(median(price)),
    Count = .N
  ),
  by = cut # for every group in cut
][
  order(-Count) # chaining
]
```


## Pipes to chain multiple operations {#pipes-to-chain-multiple-operations}

Pipes are a powerful tool for clearly expressing a sequence of multiple operations. The pipe, <kbd>%>%</kbd>, comes from the <kbd>magrittr</kbd> package. Packages in the <kbd>tidyverse</kbd> load <kbd>%>%</kbd> for you automatically, so you don’t usually load <kbd>magrittr</kbd> explicitly.

```{R  }
library(tidyverse)
```

-   nesting: The below is code to generate 100 standard normal random numbers, arrange them into 50 by 2 matrix, and plot the matrix.

<!--listend-->

```{R  }
plot(matrix(rnorm(100), ncol=2))
```

-   chaining: The code below produces the same results as the above.

<!--listend-->

```{R  }
rnorm(100) %>%
  matrix(ncol = 2) %>%
  plot
```

Some people prefer chaining to nesting because the functions applied can be read from left to right rather than from inside out.


### Data processing using `data.frame` vs `data.table` {#data-processing-using-data-dot-frame-vs-data-dot-table}

<kbd>dplyr</kbd> is a grammar of data manipulation (say, you are tidying your data), providing a consistent set of verbs that help you solve the most common data manipulation challenges. The package comes with <kbd>tidyverse</kbd>, so again you don't need to load it explicitly.

```{R  }
diamondsDT <- data.table(ggplot2::diamonds)
diamondsDF <- tbl_df(ggplot2::diamonds)

diamondsDT
diamondsDF

diamondsDT[
  cut != "Fair",
  .(AvgPrice = mean(price),
    MedianPrice = as.numeric(median(price)),
    Count = .N
  ),
  by = cut
][
  order(-Count)
]

diamondsDF %>%
  filter(cut != "Fair") %>%
  group_by(cut) %>%
  summarize(
    AvgPrice = mean(price),
    MedianPrice = as.numeric(median(price)),
    Count = n()
  ) %>%
  arrange(desc(Count))
```

In general, `data.table` is faster and more memory efficient then `dplyr`. However, you may not notice the speed difference unless you are a very large data set. `dplyr` has more accessible syntax (easy to write/read). `data.table` is a comprehensive, efficient, self-contained package. It has its own DSL, it has a very fast file reader, etc. The DSL is succint as well: you can do a lot even in a single line of code. And I believe it is currently the fastest data open source manipulation tool for data that fit in memory (see the benchmark at Rdatatable/data.table, although since then all three packages have implemented some very substantial performance improvements), and toward that goal, it provides functionality that is occasionally incredibly useful (like in-place modification of tables). data.table is also memory-efficient, and works well on very large data sets. data.table is written in C for the most part. It truly is quite an amazing piece of software. It feels exhilaratingly fast.

Conversely, dplyr emphasizes the virtues of function composition and data layer abstraction. Because of composition, it is happy to be complemented by functions provided by other packages (Hadley himself has written readr and tidyr for file reading and long/wide operations, for example). Because of built-in abstraction, dplyr allows you to munge data from several DBs using the same syntax; in this respect it has some similarity to Python's Blaze project. Finally, dplyr's code is made more efficient by the use of C++.


## Do and Don't {#do-and-don-t}


### Read a file in a local directory {#read-a-file-in-a-local-directory}

-   Avoid using an absolute path.


#### Don't {#don-t}

<a id="code-snippet--read1,eval=F"></a>
```{R  read1,eval=F}
df = fread("/path/to/local/directory/data/filename.extension")
```


#### Do {#do}

<a id="code-snippet--read2,eval=F"></a>
```{R  read2,eval=F}
setwd("/path/to/local/directory/")
df = fread("data/filename.extension")
```


### Accessing variables in list() or data.frame() {#accessing-variables-in-list-or-data-dot-frame}

-   Avoid using <kbd>attach()</kbd>. There are some possibilities for creating errors when using <kbd>attach()</kbd>.


#### Don't {#don-t}

```{R  }
data(iris)
attach(iris)
plot(Sepal.Length, Sepal.Width)
detach(iris)
```


#### Do {#do}

```{R  }
data(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
```

```{R  }
data(iris)
with(iris, plot(Sepal.Length, Sepal.Width))
```

```{R  }
data(iris)
iris %>% with(plot(Sepal.Length, Sepal.Width))
```


#### Bad use of <kbd>attach()</kbd> {#bad-use-of-attach}

```{R  }
x = c(0,0,0)
df = data.frame(x = c(1,1,1))
x
df$x
attach(df)
x
```
